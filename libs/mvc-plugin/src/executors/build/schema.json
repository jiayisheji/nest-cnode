{
  "$schema": "http://json-schema.org/schema",
  "version": 2,
  "cli": "nx",
  "title": "Build executor",
  "description": "Builds web applications using webpack.",
  "type": "object",
  "properties": {
    "main": {
      "type": "string",
      "description": "The name of the main entry-point file.",
      "x-completion-type": "file",
      "x-completion-glob": "**/*@(.js|.ts|.tsx)"
    },
    "tsConfig": {
      "type": "string",
      "description": "The name of the Typescript configuration file.",
      "x-completion-type": "file",
      "x-completion-glob": "tsconfig.*.json"
    },
    "compiler": {
      "type": "string",
      "description": "The compiler to use.",
      "enum": [
        "babel",
        "swc",
        "tsc"
      ],
      "default": "babel"
    },
    "outputPath": {
      "type": "string",
      "description": "The output path of the generated files.",
      "x-completion-type": "directory"
    },
    "target": {
      "type": "string",
      "alias": "platform",
      "description": "Target platform for the build, same as the Webpack target option.",
      "enum": [
        "node",
        "web"
      ],
      "default": "web"
    },
    "deleteOutputPath": {
      "type": "boolean",
      "description": "Delete the output path before building.",
      "default": true
    },
    "watch": {
      "type": "boolean",
      "description": "Enable re-building when files change.",
      "default": false
    },
    "vendorChunk": {
      "type": "boolean",
      "description": "Use a separate bundle containing only vendor libraries.",
      "default": true
    },
    "commonChunk": {
      "type": "boolean",
      "description": "Use a separate bundle containing code used across multiple bundles.",
      "default": true
    },
    "runtimeChunk": {
      "type": "boolean",
      "description": "Use a separate bundle containing the runtime.",
      "default": true
    },
    "sourceMap": {
      "description": "Output sourcemaps. Use 'hidden' for use with error reporting tools without generating sourcemap comment.",
      "default": true,
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ]
    },
    "progress": {
      "type": "boolean",
      "description": "Log progress to the console while building.",
      "default": false
    },
    "assets": {
      "type": "array",
      "description": "List of static application assets.",
      "default": [],
      "items": {
        "$ref": "#/definitions/assetPattern"
      }
    },
    "budgets": {
      "description": "Budget thresholds to ensure parts of your application stay within boundaries which you set.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/budget"
      },
      "default": []
    },
    "namedChunks": {
      "type": "boolean",
      "description": "Names the produced bundles according to their entry file.",
      "default": true
    },
    "outputHashing": {
      "type": "string",
      "description": "Define the output filename cache-busting hashing mode.",
      "default": "none",
      "enum": [
        "none",
        "all",
        "media",
        "bundles"
      ]
    },
    "optimization": {
      "description": "Enables optimization of the build output.",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "scripts": {
              "type": "boolean",
              "description": "Enables optimization of the scripts output.",
              "default": true
            },
            "styles": {
              "type": "boolean",
              "description": "Enables optimization of the styles output.",
              "default": true
            }
          },
          "additionalProperties": false
        },
        {
          "type": "boolean"
        }
      ]
    },
    "generatePackageJson": {
      "type": "boolean",
      "description": "Generates a `package.json` file with the project's `node_module` dependencies populated for installing in a container. If a `package.json` exists in the project's directory, it will be reused with dependencies populated.",
      "default": false
    },
    "transformers": {
      "type": "array",
      "description": "List of TypeScript Compiler Transfomers Plugins.",
      "default": [],
      "aliases": [
        "tsPlugins"
      ],
      "items": {
        "$ref": "#/definitions/transformerPattern"
      }
    },
    "additionalEntryPoints": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "entryName": {
            "type": "string",
            "description": "Name of the additional entry file."
          },
          "entryPath": {
            "type": "string",
            "description": "Path to the additional entry file.",
            "x-completion-type": "file",
            "x-completion-glob": "**/*@(.js|.ts)"
          }
        }
      }
    },
    "outputFileName": {
      "type": "string",
      "description": "Name of the main output file.",
      "default": "main.js"
    },
    "externalDependencies": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none",
            "all"
          ]
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ],
      "description": "Dependencies to keep external to the bundle. (`all` (default), `none`, or an array of module names)",
      "default": "all"
    },
    "es2015Polyfills": {
      "description": "Conditional polyfills loaded in browsers which do not support `ES2015`.",
      "type": "string"
    },
    "polyfills": {
      "type": "string",
      "description": "Polyfills to load before application",
      "x-completion-type": "file",
      "x-completion-glob": "**/*@(.js|.ts|.tsx)"
    },
    "verbose": {
      "type": "boolean",
      "description": "Emits verbose output",
      "default": false
    },
    "statsJson": {
      "type": "boolean",
      "description": "Generates a 'stats.json' file which can be analyzed using tools such as: 'webpack-bundle-analyzer' or `<https://webpack.github.io/analyse>`.",
      "default": false
    },
    "extractLicenses": {
      "type": "boolean",
      "description": "Extract all licenses in a separate file, in the case of production builds only.",
      "default": false
    },
    "memoryLimit": {
      "type": "number",
      "description": "Memory limit for type checking service process in `MB`.",
      "default": 2048
    },
    "maxWorkers": {
      "type": "number",
      "description": "Number of workers to use for type checking.",
      "default": 2
    },
    "fileReplacements": {
      "description": "Replace files with other files in the build.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "replace": {
            "type": "string",
            "description": "The file to be replaced.",
            "x-completion-type": "file"
          },
          "with": {
            "type": "string",
            "description": "The file to replace with.",
            "x-completion-type": "file"
          }
        },
        "additionalProperties": false,
        "required": [
          "replace",
          "with"
        ]
      },
      "default": []
    },
    "buildLibsFromSource": {
      "type": "boolean",
      "description": "Read buildable libraries from source instead of building them separately.",
      "default": true
    },
    "webpackConfig": {
      "type": "string",
      "description": "Path to a function which takes a webpack config, some context and returns the resulting webpack config. See https://nx.dev/guides/customize-webpack",
      "x-completion-type": "file",
      "x-completion-glob": "webpack?(*)@(.js|.ts)"
    },
    "extraEntryPoint": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "input": {
              "type": "string",
              "description": "The file to include.",
              "x-completion-type": "file",
              "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
            },
            "bundleName": {
              "type": "string",
              "description": "The bundle name for this extra entry point."
            },
            "inject": {
              "type": "boolean",
              "description": "If the bundle will be referenced in the HTML file.",
              "default": true
            }
          },
          "additionalProperties": false,
          "required": [
            "input"
          ]
        },
        {
          "type": "string",
          "description": "The file to include.",
          "x-completion-type": "file",
          "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
        }
      ]
    },
    "browserOptions": {
      "type": "object",
      "description": "Additional browser options to pass into the build target.",
      "default": {}
    }
  },
  "required": [
    "tsConfig",
    "main"
  ],
  "definitions": {
    "assetPattern": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "glob": {
              "type": "string",
              "description": "The pattern to match."
            },
            "input": {
              "type": "string",
              "description": "The input directory path in which to apply 'glob'. Defaults to the project root."
            },
            "ignore": {
              "description": "An array of globs to ignore.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "output": {
              "type": "string",
              "description": "Absolute path within the output."
            }
          },
          "additionalProperties": false,
          "required": [
            "glob",
            "input",
            "output"
          ]
        },
        {
          "type": "string"
        }
      ]
    },
    "budget": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of budget.",
          "enum": [
            "all",
            "allScript",
            "any",
            "anyScript",
            "bundle",
            "initial"
          ]
        },
        "name": {
          "type": "string",
          "description": "The name of the bundle."
        },
        "baseline": {
          "type": "string",
          "description": "The baseline size for comparison."
        },
        "maximumWarning": {
          "type": "string",
          "description": "The maximum threshold for warning relative to the baseline."
        },
        "maximumError": {
          "type": "string",
          "description": "The maximum threshold for error relative to the baseline."
        },
        "minimumWarning": {
          "type": "string",
          "description": "The minimum threshold for warning relative to the baseline."
        },
        "minimumError": {
          "type": "string",
          "description": "The minimum threshold for error relative to the baseline."
        },
        "warning": {
          "type": "string",
          "description": "The threshold for warning relative to the baseline (min & max)."
        },
        "error": {
          "type": "string",
          "description": "The threshold for error relative to the baseline (min & max)."
        }
      },
      "additionalProperties": false,
      "required": [
        "type"
      ]
    },
    "extraEntryPoint": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "input": {
              "type": "string",
              "description": "The file to include.",
              "x-completion-type": "file",
              "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
            },
            "bundleName": {
              "type": "string",
              "description": "The bundle name for this extra entry point."
            },
            "inject": {
              "type": "boolean",
              "description": "If the bundle will be referenced in the HTML file.",
              "default": true
            }
          },
          "additionalProperties": false,
          "required": [
            "input"
          ]
        },
        {
          "type": "string",
          "description": "The file to include.",
          "x-completion-type": "file",
          "x-completion-glob": "**/*@(.css|.scss|.less|.sass|.styl|.stylus)"
        }
      ]
    },
    "transformerPattern": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "options": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false,
          "required": [
            "name"
          ]
        }
      ]
    }
  }
}
